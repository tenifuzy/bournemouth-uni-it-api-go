services:
  postgres:
    image: postgres:15-alpine
    container_name: postgres_db
    networks:
      - app-network
    environment:
      POSTGRES_DB: student_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "0.0.0.0:5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  api1:
    build: .
    container_name: student_api1
    networks:
      - app-network
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: student_db
      DB_SSL_MODE: disable
      SERVER_PORT: 8080
    ports:
      - "0.0.0.0:8081:8080"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  api2:
    build: .
    container_name: student_api2
    networks:
      - app-network
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: student_db
      DB_SSL_MODE: disable
      SERVER_PORT: 8080
    ports:
      - "0.0.0.0:8082:8080"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: nginx_lb
    networks:
      - app-network
    ports:
      - "0.0.0.0:8090:8080"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - api1
      - api2
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge