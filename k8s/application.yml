apiVersion: v1
kind: Secret
metadata:
  name: app-secret
  namespace: student-api
type: Opaque
data:
  API_KEY: dGVzdC1rZXk= # test-key
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: student-api
data:
  DB_HOST: "postgres-service"
  DB_PORT: "5432"
  DB_NAME: "student_db"
  DB_SSL_MODE: "disable"
  SERVER_PORT: "8080"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: student-api
  namespace: student-api
  labels:
    app: student-api
    tier: application
spec:
  replicas: 2
  selector:
    matchLabels:
      app: student-api
  template:
    metadata:
      labels:
        app: student-api
        tier: application
    spec:
      nodeSelector:
        type: application
      initContainers:
      - name: migration
        image: tenifuzy01/v1:latest
        imagePullPolicy: Never
        envFrom:
        - configMapRef:
            name: app-config
        - secretRef:
            name: db-secret
        - secretRef:
            name: app-secret
        command:
        - /bin/sh
        - -c
        - |
          echo "Waiting for database to be ready..."
          until nc -z $DB_HOST $DB_PORT; do
            echo "Waiting for PostgreSQL at $DB_HOST:$DB_PORT..."
            sleep 2
          done
          echo "Database is ready, running migrations..."
          /app/main migrate || echo "Migration completed or no changes needed"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      containers:
      - name: student-api
        image: tenifuzy01/v1:latest
        imagePullPolicy: Never
        ports:
        - containerPort: 8080
        envFrom:
        - configMapRef:
            name: app-config
        - secretRef:
            name: db-secret
        - secretRef:
            name: app-secret
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /healthcheck
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /healthcheck
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /healthcheck
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 30
---
apiVersion: v1
kind: Service
metadata:
  name: student-api-service
  namespace: student-api
  labels:
    app: student-api
spec:
  selector:
    app: student-api
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: student-api-loadbalancer
  namespace: student-api
  labels:
    app: student-api
spec:
  selector:
    app: student-api
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  name: student-api-nodeport
  namespace: student-api
  labels:
    app: student-api
spec:
  selector:
    app: student-api
  ports:
  - port: 8080
    targetPort: 8080
    nodePort: 30080
    protocol: TCP
  type: NodePort